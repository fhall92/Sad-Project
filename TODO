TO-DO

--------------------Registration (10%)-----------------------------
- Users registered to database [X]
- Complexity Rules for Passwords [X]
- Adequate error handling [X]
- ADMIN user created automatically [X]

-----------------------Login---------------------------------------
--Unsuccessful Attempt (20%)--

- Generic error message "The username X and password comibation cannot be authenticated" [X]
- Username reflected in error message [X]
- Reflected parameter not susceptible to XSS [X]
- Lockout after 5 attempts for 3 minutes [X]

--Successful Attempt (15%)--
- System greets you by username [X]
- Create active authenticated session [X]
- Authenticated user may view 2 or more pages [X]
- secure logout [X]
- lockout after 10 mins inactivity []
- Max session duration 1 hour [X]

--------------- Password Change (15%) ---------------------------
- Authenticated user can change password [X]
- Complexity rules for password [X]
- session expires on password change [X]
- User needs to re-auth using new credentials to access [X]
- GET not POST [X]

--------------Event Log & ADMIN user (10%)--------------------
- All login attempts stored in log []
- Log viewable by ADMIN only [X]

--------------Testing (30%)-----------------------------------
- Documentation []
	- Implemented Functionality []
	- Security Test Cases []
	- Test Results []

	NOTE: tests highlight what security feature you are assessing, 
	  	  tests performed along with results.
	

----------FINAL CHECKS----------------------------------------
	- Sanitise all form values []





	
USE IP ADDRESS TO Lockout

TESTING RUN THROUGH FIDLER

TEST XSS (ONE ON LOGIN AND ONE ON REGISTER---WHERE INPUT FIELDS)

CREATE SANITIZATION FUNCTION
	NOT FILTERING CHARACTERS, BUT SANITISING

USE BUILTIN HASHING FUNCTION BUT DO SALT AND STUFF YOURSELF

TIE USER AGENT AND IP ADDRESS TOGETHER (IN DATABASE OR IN MEMORY)


TEST FOR XSS, CSRF, ESCAPE CHARACTERS, Persistent, Brute Force